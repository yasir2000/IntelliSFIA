# IntelliSFIA Framework

[Pyproject.toml configuration for IntelliSFIA Framework]

[tool.poetry]
name = "intellisfia"
version = "1.0.0"
description = "IntelliSFIA - Intelligent Skills Framework for the Information Age with Multi-Agent AI"
authors = ["Your Name <your.email@example.com>"]
license = "MIT"
readme = "README.md"
homepage = "https://github.com/your-org/intellisfia"
repository = "https://github.com/your-org/intellisfia"
documentation = "https://docs.intellisfia.com"
keywords = ["SFIA", "AI", "Skills", "Multi-Agent", "Knowledge Graph", "Career Development"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Office/Business :: Human Resources",
]

[tool.poetry.dependencies]
python = "^3.11"
# Core Framework
neo4j = "^5.15.0"
rdflib = "^7.0.0"
pydantic = "^2.5.0"
pydantic-settings = "^2.1.0"

# AI and ML
crewai = "^0.28.0"
langchain = "^0.1.0"
langchain-community = "^0.0.20"
openai = "^1.12.0"
anthropic = "^0.21.0"
scikit-learn = "^1.4.0"
numpy = "^1.26.0"
pandas = "^2.2.0"

# Web Framework
fastapi = "^0.109.0"
uvicorn = "^0.27.0"
streamlit = "^1.31.0"

# CLI
click = "^8.1.7"
rich = "^13.7.0"
questionary = "^2.0.1"

# HTTP Client
httpx = "^0.27.0"
aiohttp = "^3.9.0"

# Configuration and Utilities
pyyaml = "^6.0.1"
python-dotenv = "^1.0.0"
toml = "^0.10.2"

# Optional Dependencies for specific providers
azure-openai = {version = "^1.13.0", optional = true}
transformers = {version = "^4.37.0", optional = true}

[tool.poetry.group.dev.dependencies]
pytest = "^8.0.0"
pytest-asyncio = "^0.23.0"
pytest-cov = "^4.0.0"
black = "^24.0.0"
flake8 = "^7.0.0"
mypy = "^1.8.0"
pre-commit = "^3.6.0"
sphinx = "^7.2.0"
sphinx-rtd-theme = "^2.0.0"

[tool.poetry.extras]
azure = ["azure-openai"]
huggingface = ["transformers"]
all = ["azure-openai", "transformers"]

[tool.poetry.scripts]
intellisfia = "sfia_ai_framework.cli:cli"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.black]
line-length = 100
target-version = ['py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[tool.pytest.ini_options]
minversion = "6.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = [
    "tests",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

[tool.coverage.run]
source = ["sfia_ai_framework"]
omit = [
    "*/tests/*",
    "*/test_*",
    "setup.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]