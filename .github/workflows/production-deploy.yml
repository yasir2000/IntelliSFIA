name: IntelliSFIA Production Deployment

on:
  push:
    branches: [main, develop]
    tags: ['v*']
  pull_request:
    branches: [main]

env:
  REGISTRY: ghcr.io
  IMAGE_PREFIX: intellisfia

jobs:
  # Security and Quality Gates
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Run Semgrep
        uses: semgrep/semgrep-action@v1
        with:
          config: >-
            p/security-audit
            p/secrets
            p/owasp-top-ten
            p/python
            p/javascript
            p/typescript

  # Frontend Tests and Build
  frontend-test:
    name: Frontend Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: package-lock.json

      - name: Install dependencies
        run: npm ci

      - name: Run ESLint
        run: npm run lint

      - name: Run type checking
        run: npm run type-check

      - name: Run tests
        run: npm test -- --coverage --watchAll=false

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage/lcov.info
          flags: frontend

  # Backend Tests
  backend-test:
    name: Backend Tests
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r backend/requirements.txt
          pip install -r backend/requirements-dev.txt

      - name: Run linting
        run: |
          cd backend
          flake8 .
          black --check .
          isort --check-only .

      - name: Run type checking
        run: |
          cd backend
          mypy .

      - name: Run tests
        env:
          DATABASE_URL: postgresql://postgres:test_password@localhost:5432/test_db
          REDIS_URL: redis://localhost:6379/0
          JWT_SECRET_KEY: test-secret-key
        run: |
          cd backend
          pytest --cov=. --cov-report=xml

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./backend/coverage.xml
          flags: backend

  # Build and Push Docker Images
  build-images:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: [security-scan, frontend-test, backend-test]
    if: github.event_name != 'pull_request'
    outputs:
      frontend-image: ${{ steps.meta.outputs.frontend-tags }}
      backend-image: ${{ steps.meta.outputs.backend-tags }}
      sfia-engine-image: ${{ steps.meta.outputs.sfia-engine-tags }}
      rdf-service-image: ${{ steps.meta.outputs.rdf-service-tags }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}/frontend
            ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}/backend
            ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}/sfia-engine
            ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}/rdf-service
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha,prefix={{branch}}-

      - name: Build and push Frontend image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile.frontend.prod
          push: true
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}/frontend:${{ steps.meta.outputs.version }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64

      - name: Build and push Backend image
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          file: ./backend/Dockerfile.prod
          push: true
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}/backend:${{ steps.meta.outputs.version }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64

      - name: Build and push SFIA Engine image
        uses: docker/build-push-action@v5
        with:
          context: ./sfia_rdf
          file: ./sfia_rdf/Dockerfile
          push: true
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}/sfia-engine:${{ steps.meta.outputs.version }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64

      - name: Build and push RDF Service image
        uses: docker/build-push-action@v5
        with:
          context: ./sfia_rdf
          file: ./sfia_rdf/Dockerfile.rdf
          push: true
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}/rdf-service:${{ steps.meta.outputs.version }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64

  # Deploy to Staging
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build-images]
    if: github.ref == 'refs/heads/develop'
    environment:
      name: staging
      url: https://staging.intellisfia.com
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'v1.28.0'

      - name: Configure kubectl
        run: |
          echo "${{ secrets.KUBE_CONFIG_STAGING }}" | base64 -d > kubeconfig
          export KUBECONFIG=kubeconfig

      - name: Deploy to staging
        run: |
          export KUBECONFIG=kubeconfig
          
          # Update image tags in Kubernetes manifests
          sed -i "s|intellisfia/frontend:latest|${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}/frontend:${{ needs.build-images.outputs.version }}|g" deployment/kubernetes/intellisfia-app.yaml
          sed -i "s|intellisfia/api-gateway:latest|${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}/backend:${{ needs.build-images.outputs.version }}|g" deployment/kubernetes/intellisfia-app.yaml
          sed -i "s|intellisfia/sfia-engine:latest|${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}/sfia-engine:${{ needs.build-images.outputs.version }}|g" deployment/kubernetes/intellisfia-app.yaml
          sed -i "s|intellisfia/rdf-service:latest|${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}/rdf-service:${{ needs.build-images.outputs.version }}|g" deployment/kubernetes/intellisfia-app.yaml
          
          # Apply Kubernetes manifests
          kubectl apply -f deployment/kubernetes/intellisfia-app.yaml
          kubectl rollout status deployment/intellisfia-frontend -n intellisfia --timeout=300s
          kubectl rollout status deployment/intellisfia-api-gateway -n intellisfia --timeout=300s
          kubectl rollout status deployment/intellisfia-sfia-engine -n intellisfia --timeout=300s
          kubectl rollout status deployment/intellisfia-rdf-service -n intellisfia --timeout=300s

      - name: Run smoke tests
        run: |
          # Wait for services to be ready
          sleep 30
          
          # Basic health checks
          curl -f https://staging.intellisfia.com/health || exit 1
          curl -f https://staging.intellisfia.com/api/health || exit 1

  # Deploy to Production
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build-images]
    if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v')
    environment:
      name: production
      url: https://intellisfia.com
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'v1.28.0'

      - name: Configure kubectl
        run: |
          echo "${{ secrets.KUBE_CONFIG_PRODUCTION }}" | base64 -d > kubeconfig
          export KUBECONFIG=kubeconfig

      - name: Deploy database migrations
        run: |
          export KUBECONFIG=kubeconfig
          
          # Run database migrations
          kubectl create job --from=cronjob/database-migration migration-$(date +%s) -n intellisfia || true
          kubectl wait --for=condition=complete job migration-$(date +%s) -n intellisfia --timeout=300s

      - name: Deploy to production
        run: |
          export KUBECONFIG=kubeconfig
          
          # Update image tags in Kubernetes manifests
          sed -i "s|intellisfia/frontend:latest|${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}/frontend:${{ needs.build-images.outputs.version }}|g" deployment/kubernetes/intellisfia-app.yaml
          sed -i "s|intellisfia/api-gateway:latest|${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}/backend:${{ needs.build-images.outputs.version }}|g" deployment/kubernetes/intellisfia-app.yaml
          sed -i "s|intellisfia/sfia-engine:latest|${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}/sfia-engine:${{ needs.build-images.outputs.version }}|g" deployment/kubernetes/intellisfia-app.yaml
          sed -i "s|intellisfia/rdf-service:latest|${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}/rdf-service:${{ needs.build-images.outputs.version }}|g" deployment/kubernetes/intellisfia-app.yaml
          
          # Apply Kubernetes manifests
          kubectl apply -f deployment/kubernetes/intellisfia-app.yaml
          kubectl rollout status deployment/intellisfia-frontend -n intellisfia --timeout=600s
          kubectl rollout status deployment/intellisfia-api-gateway -n intellisfia --timeout=600s
          kubectl rollout status deployment/intellisfia-sfia-engine -n intellisfia --timeout=600s
          kubectl rollout status deployment/intellisfia-rdf-service -n intellisfia --timeout=600s

      - name: Run production health checks
        run: |
          # Wait for services to be ready
          sleep 60
          
          # Comprehensive health checks
          curl -f https://intellisfia.com/health || exit 1
          curl -f https://intellisfia.com/api/health || exit 1
          curl -f https://intellisfia.com/api/skills/health || exit 1
          curl -f https://intellisfia.com/sfia/health || exit 1
          curl -f https://intellisfia.com/rdf/health || exit 1

      - name: Notify deployment success
        uses: 8398a7/action-slack@v3
        if: success()
        with:
          status: success
          text: '✅ IntelliSFIA Production deployment successful!'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Notify deployment failure
        uses: 8398a7/action-slack@v3
        if: failure()
        with:
          status: failure
          text: '❌ IntelliSFIA Production deployment failed!'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  # Performance and Load Testing
  performance-test:
    name: Performance Testing
    runs-on: ubuntu-latest
    needs: [deploy-staging]
    if: github.ref == 'refs/heads/develop'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js for K6
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install K6
        run: |
          sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys C5AD17C747E3415A3642D57D77C6C491D6AC1D69
          echo "deb https://dl.k6.io/deb stable main" | sudo tee /etc/apt/sources.list.d/k6.list
          sudo apt-get update
          sudo apt-get install k6

      - name: Run performance tests
        run: |
          k6 run --out json=results.json tests/performance/load-test.js
          
      - name: Upload performance results
        uses: actions/upload-artifact@v3
        with:
          name: performance-results
          path: results.json

  # Security Penetration Testing
  security-test:
    name: Security Testing
    runs-on: ubuntu-latest
    needs: [deploy-staging]
    if: github.ref == 'refs/heads/develop'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run OWASP ZAP scan
        uses: zaproxy/action-full-scan@v0.7.0
        with:
          target: 'https://staging.intellisfia.com'
          rules_file_name: '.zap/rules.tsv'
          cmd_options: '-a -x report.xml'

      - name: Upload ZAP scan results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: zap-results
          path: report.xml